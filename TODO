;;;;-*- Lisp -*-
#|
* fare:

* Unassigned:
* add documentation: a manual, a tutorial, etc. (see github issue #3)
* Check that all generic functions are implemented for a concrete class
** Some bootstrapped datastructure from Okasaki
** More from
 http://planet.plt-scheme.org/display.ss?package=pfds.plt&owner=krhari
** Implement functional arrays -- use RRB-trees?
  http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf
** The above seem slightly better than Finger trees
  http://www.soi.city.ac.uk/~ross/papers/FingerTree.html
  http://andrew.gibiansky.com/blog/haskell/finger-trees/
** also implement stateful vectors
** implement pure and stateful abstract sequences, single-linked lists, etc.
** implement stateful sets (see github issue #8)
** implement Fibonacci heaps
** implement red-black trees
** Import functionality from cl-containers?
** Add "Minimal Viable Snippet" for the library and each of its major features.
*** Initial: some treesort ?
** test explicit <-> implicit adapters
** look at how scala does these things http://www.scala-lang.org/
** Move the payload of a tree out of the basic tree structure (i.e. (key, value))
** Add method to choose on which side of the tree to drop and/or insert,
 or document why the default is always right.
** Have stateful classes that allow for removing
 one and/or many entries while walking the structure once and/or many times (?)
** Add value merging as a method, i.e. generalize the map/2 mechanism to insert.
** Get something like cl-container's find-or-create-class, combined with memoization,
 for generating classes that match some specification of an interface.
** Note that a single interface may have many classes and subinterfaces,
 sometimes with mutual recursion in classes pointing to each other
 through methods and/or :class allocated slots.
** Develop example of multiply-indexed-organized tuple store.
 Each node is simultaneously node of multiple trees.
 Depending on which index you're using,
 they have to be viewed as a tree in the according way,
 and appropriate accessors have to be chosen for say subtree access.
 The same tree-manipulation routines can be used on the same tree nodes
 with completely different results depending on which interface you use.
** Document the interface transformers.
** Add :pre and :post pure compositional analogues to :before and :after --
 preprocess arguments and post-process results.
** Invalidate interface constructor memoization caches
 when the interface definition changes.
 Suggestion: make it based on a sxhash of the definition SEXP.
** Integrate with typep.
 Recognizers, like constructors, require special treatment in OO style.
 Enhance the linear typesystem to handle this case.

* send mail to the maintainers of each and every datastructure library,
 and offer to merge into lil.

* Reuse the design from the Haskell collections API?
 http://hackage.haskell.org/packages/archive/collections-api/1.0.0.0/doc/html/doc-index.html

* Low Priority:
** Remember functions that were built with explicit->implicit adapter,
 and optimize away indirection through interface in any implicit->explicit transformation back.
** refactor transformers through a with-lambda-list-adapter
** Create a DSL so both pure and stateful variants
 can be extracted from a single specification,
 whereby you can (update-node a ...) and it will preserve
 the identity of linear variable a when in stateful mode.
 Basically, the language would be a linear lisp with region annotations;
 annotation of the same unique region between input and output signifies
 update in place in the mutable variant.
** In implementing data structures, there should be a way to declare symmetries and
 not have to fill in the blank. Kind of like Bach sometimes wrote his music as puzzles
 whereby the reader would have to complete using symmetries.
 One approach would be to do like Dan Friedman or William Byrd, and implement
 in miniKanren a Prolog-style semantics for the Lisp dialect used in implementing
 data structures, then search for solutions to constrained problems.
 See also the works of http://homes.cs.washington.edu/~emina/
|#
